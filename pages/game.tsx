import { useEffect, useState } from 'react';
import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '@/styles/Game.module.css';
import Card from '../Components/FoodItemCard';

import type FoodItem from '../interfaces/foodItem';
const originalItems: FoodItem[] = require('../cache/foodData').data;
const inter = Inter({ subsets: ['latin'] });

// Pre-shuffle the originalItems array
const shuffledItems = [...originalItems];
for (let i = shuffledItems.length - 1; i > 0; i--) {
  const j = Math.floor(Math.random() * (i + 1));
  [shuffledItems[i], shuffledItems[j]] = [shuffledItems[j], shuffledItems[i]];
}

let currentIndex = 0;

const getRandomItems = (): [FoodItem, FoodItem] => {
  if (shuffledItems.length < 2) {
    throw new Error('Not enough items to play the game.');
  }

  // Get the next two items from the shuffled array
  const item1 = shuffledItems[currentIndex];
  const item2 = shuffledItems[currentIndex + 1];
  currentIndex += 2;

  // If we reach the end of the array, reshuffle and reset the currentIndex
  if (currentIndex >= shuffledItems.length) {
    currentIndex = 0;
    // Re-shuffle the array
    for (let i = shuffledItems.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffledItems[i], shuffledItems[j]] = [shuffledItems[j], shuffledItems[i]];
    }
  }

  return [item1, item2];
}

const GamePage: React.FC = () => {
  const [randomItems, setRandomItems] = useState<[FoodItem, FoodItem]>([originalItems[0], originalItems[1]]);

  const handleNewRound = () => {
    try {
      const [item1, item2] = getRandomItems();
      setRandomItems([item1, item2]);
    } catch (error) {
      console.log("error.message");
    }
  }

  const submitAnswer = (event: any, answer: number) => {
    console.log(answer);
    handleNewRound();
  }

  useEffect(() => {
    setRandomItems(getRandomItems());
  }, []);

  return (
    <>
      <Head>
        <title>Game</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.container}>
          <p className={styles.metadata}>Score
            <span className={styles.datum}>10</span>
          </p>
          <p className={styles.metadata}>Time Remaining
            <span className={styles.datum}>10:10</span>
          </p>
        </div>
        <h1 className={styles.header}>Which has the lowest impact?</h1>
        <div className={styles.cards}>
          <Card item={randomItems[0] ? randomItems[0] : originalItems[0]} submitAnswer={submitAnswer} i={1}/>
          <span className={styles.separator}>vs</span>
          <Card item={randomItems[1] ? randomItems[1] : originalItems[1]} submitAnswer={submitAnswer} i={1} />
        </div>
      </main>
    </>
  )
}

export default GamePage;
